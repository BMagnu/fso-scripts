#Conditional Hooks
$Application: FS2_Open

$On Game Init:
[
--[[
***Speedrun Timer - LiveSplit Integration***
        By Zero Serenity

Allows for timer integrations with LiveSplit for Freespace 1 and Freespace 2.

]]--

    SpeedrunTimer = {}

    function SpeedrunTimer:Init()
        self.Initialized = false
        self.Started = false
        self.RunningStatus = false --Status of the clock running.
        self.SegmentTimes = {} --Holds segment times for the timer.
        self.CurrentSegmentTime = 0 --The time for the current segment.
        self.TotalTime = 0 --The time since the start of the run.
        self.CurrentMission = "" --Holds the current mission filename.
        self.LSEndpoint = "\\\\.\\pipe\\LiveSplit" --Localhost LiveSplit pipe. Will not likely work with a file.
        self.InputOutput = require "io" --io is defaulted to the controls. Since we need it to send LiveSplit commands, we need an alias.
        self.LSPipe = self.InputOutput.open(self.LSEndpoint, "w") --Open/start the pipe. Flush is required after every command.
        ba.println("Speedrun Timer: Initialized - " .. tostring(time.getCurrentTime()))
        self.Initialized = true
    end

    function SpeedrunTimer:StopTimer()
        self.RunningStatus = false
        ba.println("Speedrun Timer: StopTimer called - Last Segment Time: " .. self.CurrentSegmentTime)
        self.CurrentSegmentTime = 0
        self:PauseLiveSplit();
    end

    function SpeedrunTimer:PauseLiveSplit() --Send Pause to LiveSplit, and split if its on a tracked segment.
        local missionFilename = mn.getMissionFilename():upper()
        ba.println("Speedrun Timer: PauseLiveSplit called - Mission Filename: " .. missionFilename)

        if (missionFilename == "SM3-10A") --End of FSPort.
        then
            ba.println("Speedrun Timer: End of FSPort reached: " .. missionFilename)
            self.LSPipe:write "split\n" --Split time.
            self.LSPipe:flush()
            self.CurrentMission = mn.getMissionFilename():upper()
            return
        elseif (mn.isTraining()) then --Training Missions
            ba.println("Speedrun Timer: Training mission, split not called: " .. missionFilename)
        elseif (missionFilename == "SM1-01") then --Start of the game.
            ba.println("Speedrun Timer: Start of the game, split not called: " .. missionFilename)
        elseif (self.CurrentMission == missionFilename and --We restarted a mission...
            not (ca.getNextMissionFilename() == nil)) --...and is not the end of the campaign.
            then
            ba.println("Speedrun Timer: Mission restarted: " .. missionFilename)
        else
            ba.println("Speedrun Timer: Splitting: " .. missionFilename)
            self.LSPipe:write "split\n" --Split time.
            self.LSPipe:flush()
        end
        
        self.LSPipe:write "pausegametime\n" --Stop the clock for the loading screen.
        self.LSPipe:flush()
        self.CurrentMission = mn.getMissionFilename():upper()
    end

    function SpeedrunTimer:StartTimer()
        if not(mn.isInCampaign()) then
            return
        end
        self.RunningStatus = true
        self.LastStart = time.getCurrentTime()
        ba.println("Speedrun Timer: StartTimer called")
        self:StartLiveSplit()
    end
    
    function SpeedrunTimer:StartLiveSplit() --Send Resume to LiveSplit
        if not self.Started then
            ba.println("Speedrun Timer: Run started, calling LiveSplit.")
            self.LSPipe:write "start\n" --Start the game!
            self.LSPipe:flush()
            self.Started = true
        else
            ba.println("Speedrun Timer: Segment Unpaused, calling LiveSplit.")
            self.LSPipe:write "unpausegametime\n" --Loading screen is done, unpause the clock.
            self.LSPipe:flush()
        end
    end

    function SpeedrunTimer:ResetLiveSplit()
        if self.LSPipe == nil then
            ba.warning("Speedrun Timer: Reset called, but the pipe does not exist.")
        else
            self.LSPipe:write "reset\n"
            self.LSPipe:flush()
            self.LSPipe:close()
        end
    end
]

$On Load Screen:
[
    if SpeedrunTimer.RunningStatus == true then
        SpeedrunTimer:StopTimer()
        ba.println("Speedrun Timer: Paused, Loading Screen")
    end
]

$On Load Complete:
[
    local missionFilename = mn.getMissionFilename():upper()
    if  (missionFilename == "BTM-01") or --Training One in the FSPort
        (missionFilename == "BTM-02") or --Training Two in the FSPort
        (missionFilename == "BTM-03") or --Training Three in the FSPort
        (missionFilename == "SM1-01A") then  --SM1-01A is the FSPort Starting Mission, timer starts on pressing accept.
            ba.println("Speedrun Timer: Not a run point. " .. SpeedrunTimer.CurrentSegmentTime)
        return
    end
    if (missionFilename == "SM3-10A") then --SM3-10A is the FSPort Credits Mission
        SpeedrunTimer:StopTimer()
    end
    if SpeedrunTimer.RunningStatus == false then
        SpeedrunTimer:StartTimer()
        ba.println("Speedrun Timer: Started, Loading Screen Ended " .. SpeedrunTimer.CurrentSegmentTime)
    end
]

$On State Start:
[
    local currentState = hv.NewState.Name
    ba.println("Speedrun Timer: Start State Change - Old: " .. hv.OldState.Name .. " New: " .. currentState)
    if (currentState ==  "GS_STATE_GAME_PLAY") then
        if SpeedrunTimer.RunningStatus == false then
            SpeedrunTimer:StartTimer()
            ba.println("Speedrun Timer: Started, Gameplay Begun " .. SpeedrunTimer.CurrentSegmentTime)
        end
    elseif (currentState == "GS_STATE_END_OF_CAMPAIGN") then --Last Debrief, on successful ending
        if SpeedrunTimer.RunningStatus == true then
            SpeedrunTimer:StopTimer()
            ba.println("Speedrun Timer: Stopped, Campaign Ended")
        end
    elseif (currentState == "GS_STATE_DEBRIEF" and (ca.getNextMissionFilename() == nil or ca.getNextMissionFilename() == "SM3-10A")) then --Last Debrief, on any ending
        if SpeedrunTimer.RunningStatus == true then
            SpeedrunTimer:StopTimer()
            ba.println("Speedrun Timer: Stopped, Campaign Ended")
        end
    elseif (currentState == "GS_STATE_CAMPAIGN_ROOM") then
        ba.println("Speedrun Timer: Reset from Campaign Room")
        SpeedrunTimer:ResetLiveSplit() --Restart the external clock
        SpeedrunTimer:Init() --Reset everything.
    end
]

$State: GS_STATE_MAIN_MENU
$On State Start:
[
    --Initialize
    if SpeedrunTimer.Initialized == nil then
        SpeedrunTimer:Init()
    end
]
#End