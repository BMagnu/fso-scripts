#Conditional Hooks
$Application: FS2_Open
$On Game Init:
[

Scroll = {}

function Scroll:Init()

	self.Enabled = false
	self.Lines = {}
	self.InterfaceSound = 20
	self.GameSound = ad.getSoundentry(10)

	self.UseConfig = false
	self.BaseWidth = nil
	self.BaseHeight = nil
	self.StandardWidth = nil
	self.StandardHeight = nil
	self.StandardFont = nil

end

function Scroll:Clear()

	self.Enabled = false
	self.Lines = {}

end

function Scroll:Configure(gauge_name, standard_width, standard_height)

	local gauge = hu.getHUDGaugeHandle(gauge_name)
	if not gauge then
		ba.warning("ScrollWrite: HUD gauge '" .. tostring(gauge_name) .. "' not found!")
		return
	end

	self.BaseWidth, self.BaseHeight = gauge:getBaseResolution()
	self.StandardWidth = standard_width or 1024
	self.StandardHeight = standard_height or 768
	self.StandardFont = gauge:getFont()
	self.UseConfig = true

end

function Scroll:WriteFromFile(file, x, y, speed, visibletime, fadeout, sound, font, center, r, g, b, loop)

	local pos = file:find(".txt", -4, true)

	if not pos then
		file = file .. ".txt"
	end

	if cf.fileExists(file, "data/fiction", true) then
		local f = cf.openFile(file,"rb","data/fiction")
		local data = f:read("*a")
		self:Write(data, x, y, speed, visibletime, fadeout, sound, font, center, r, g, b, loop)
		f:close()
	end

end

function Scroll:Write(text, x, y, speed, visibletime, fadeout, sound, font, center, r, g, b, loop)

	if not self.Enabled then
		self.Enabled = true
	end

	local t = {}

	if not text then
		return
	end

	if mn.Messages[text]:isValid() then
		t.Text = mn.Messages[text]:getMessage(true)
	else
		t.Text = text
	end

	if self.UseConfig then
		t.X = x or (self.StandardWidth / 2)
		t.X = t.X * self.BaseWidth / self.StandardWidth
		t.Y = y or (self.StandardHeight / 2)
		t.Y = t.Y * self.BaseHeight / self.StandardHeight
	else
	t.X = x or 50
	t.X = gr.getScreenWidth() * (t.X/100)
	t.Y = y or 50
	t.Y = gr.getScreenHeight() * (t.Y/100)
	end

	t.Speed = speed or 0.03
	t.SoundDuration = #t.Text * t.Speed
	t.Timestamp = mn.getMissionTime()
	t.Time = visibletime or 5
	t.FadeOut = fadeout or 0

	if font and font:lower() ~= "default" then
		t.Font = gr.Fonts[font]
	elseif self.UseConfig then
		t.Font = self.StandardFont
	else
		t.Font = gr.Fonts[1]
	end

	if sound == false then
		t.Sound = false
	else
		t.Sound = true
	end
	if center == false then
		t.Center = false
	else
		t.Center = true
	end
	t.Color = {r or 255, g or 255, b or 255}
	t.Alpha = 255
	if loop == true then
		t.Loop = true
	else
		t.Loop = false
	end

	self.Lines[#self.Lines+1] = t

end

function Scroll:Draw()

	local mTime = mn.getMissionTime()
	local savedFont

		local numLines = #self.Lines
	if numLines > 0 then
		local prevResizeMode
		if self.UseConfig then
			prevResizeMode = gr.CurrentResizeMode
			gr.CurrentResizeMode = GR_RESIZE_FULL
			gr.setScreenScale(self.BaseWidth, self.BaseHeight)
			gr.setClip(0, 0, self.BaseWidth, self.BaseHeight)
		end

		for i = 1, numLines do
				local line = self.Lines[i]
			if line then
				if mTime < (line.Timestamp + line.Time + line.FadeOut) then
					if line.Sound then
						if line.Loop then
							line.Handle = ad.playLoopingSound(self.GameSound)
						else
							ad.playInterfaceSound(self.InterfaceSound)
						end
						line.Sound = nil
					end

					local toDraw = (mTime - line.Timestamp) / line.Speed
					if toDraw > 0 then
						local displayString = line.Text:sub(1, toDraw)
						local lastChar = line.Text:sub(-1)
						local x, y = line.X, line.Y

						if not savedFont then
							savedFont = gr.CurrentFont
						end
						gr.CurrentFont = line.Font

						if line.Handle and mTime > (line.Timestamp + line.SoundDuration) then
							line.Handle:stop()
							line.Handle = nil
						end
						if mTime > (line.Timestamp + line.Time) then
							local t = mTime - (line.Timestamp + line.Time)
							line.Alpha = self:Ease(t,255,-255,line.FadeOut)
						end

						if lastChar == ">" then
							line.Speed = 0.05
						elseif lastChar == "\\n" then
							line.Speed = 0.02
						end

						gr.setColor(line.Color[1], line.Color[2], line.Color[3], line.Alpha)

						if line.Center then
							x = x - (gr.getStringWidth(line.Text)/2)
						end

						gr.drawString(displayString,x,y)
					end
				end
			else
				table.remove(self.Lines,i)
				numLines = numLines - 1

				if numLines == 0 then
					self.Enabled = false
				end
			end
		end

		if self.UseConfig then
			gr.resetScreenScale()
			gr.resetClip()
			gr.CurrentResizeMode = prevResizeMode
		end
		if savedFont then
			gr.CurrentFont = savedFont
		end
	end

end

function Scroll:Ease(t,b,c,d)
  t = t / d
  return -c * t * (t - 2) + b
end

function Scroll:SetInterfaceSound(idx)
	if idx then
		self.InterfaceSound = idx
	end
end

-- this function accepts strings or soundentry types
function Scroll:SetGameSound(entry)
	if entry then
		if type(entry) == "string" then
			entry = ad.getSoundentry(entry)
		end
		if entry:isValid() then
			self.GameSound = entry
		end
	end
end

mn.LuaSEXPs["lua-scroll-write-configure"].Action = function(gauge_name, standard_width, standard_height)
  Scroll:Configure(gauge_name, standard_width, standard_height)
end
mn.LuaSEXPs["lua-scroll-write"].Action = function(text, x, y, speed, visibletime, fadeout, sound, font, center, r, g, b, loop)
  Scroll:Write(text, x, y, speed/1000, visibletime/1000, fadeout/1000, sound, font, center, r, g, b, loop)
end
mn.LuaSEXPs["lua-scroll-write-file"].Action = function(file, x, y, speed, visibletime, fadeout, sound, font, center, r, g, b, loop)
  Scroll:WriteFromFile(file, x, y, speed/1000, visibletime/1000, fadeout/1000, sound, font, center, r, g, b, loop)
end
mn.LuaSEXPs["lua-scroll-write-clear"].Action = function()
  Scroll:Clear()
end
mn.LuaSEXPs["lua-scroll-write-set-iface-snd"].Action = function(idx)
  Scroll:SetInterfaceSound(idx)
end
mn.LuaSEXPs["lua-scroll-write-set-game-snd"].Action = function(entry)
  Scroll:SetGameSound(entry)
end

]

$On Mission Start: 
[
	Scroll:Init()
]

$State: GS_STATE_GAME_PLAY
$On Frame:
[
	if Scroll.Enabled then
		Scroll:Draw()
	end
]

#End
